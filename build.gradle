plugins {
    id 'io.franzbecker.gradle-lombok' version '1.11'
    id 'java'
    id 'jacoco'
    id 'signing'
    id 'maven'
}

group 'io.leonis'
version '0.0.1'
archivesBaseName = 'Mx'
rootProject.description = 'declarative object manipulation'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

dependencies {
    compile 'io.reactivex.rxjava2:rxjava:[2.0.0,)'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

tasks.withType(Javadoc) {
    ext.capturedOutput = [ ]
    def listener = { ext.capturedOutput << it } as StandardOutputListener

    logging.addStandardErrorListener(listener)
    logging.addStandardOutputListener(listener)
    options.addStringOption('Xdoclint:all', '-quiet')

    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        ext.capturedOutput.join('').with { output ->
            if (output =~ /warning/) {
                throw new RuntimeException("Javadoc warning found: \n" + output)
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar, sourcesJar
}

if (!project.hasProperty("signing.keyId") && System.getenv("signingKeyId") != null) {
    allprojects { ext."signing.keyId" = System.getenv("signingKeyId") }
}

if (!project.hasProperty("signing.password") && System.getenv("signingPassword") != null) {
    allprojects { ext."signing.password" = System.getenv("signingPassword") }
}

if (!project.hasProperty("signing.secretKeyRingFile") && System.getenv("signingSecretKeyRing") != null) {
    def file = new File("$projectDir/secring.gpg")
    file.createNewFile()
    file.text = System.getenv("signingSecretKeyRing")
    allprojects { ext."signing.secretKeyRingFile" = "$projectDir/secring.gpg" }
}

signing {
    sign configurations.archives
}

if (project.hasProperty("sign")) {
    signArchives.enabled = sign.toBoolean()
} else if (System.getenv("sign") != null) {
    signArchives.enabled = System.getenv("sign").toBoolean()
} else {
    signArchives.enabled = false
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                if (project.hasProperty("sonatypeUsername") && project.hasProperty("sonatypePassword")) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                } else if (System.getenv("sonatypeUsername") != null && System.getenv("sonatypePassword") != null) {
                    authentication(userName: System.getenv("sonatypeUsername"), password: System.getenv("sonatypePassword"))
                }
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                if (project.hasProperty("sonatypeUsername") && project.hasProperty("sonatypePassword")) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                } else if (System.getenv("sonatypeUsername") != null && System.getenv("sonatypePassword") != null) {
                    authentication(userName: System.getenv("sonatypeUsername"), password: System.getenv("sonatypePassword"))
                }
            }

            pom.project {
                name 'Mx'
                packaging 'jar'
                description 'declarative object manipulation'
                url 'https://github.com/delta-leonis/Mx/'

                licenses {
                    license {
                        name 'MIT'
                        url 'https://github.com/delta-leonis/Mx/blob/master/LICENSE'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'https://github.com/delta-leonis/Mx/'
                    connection 'scm:git:git://github.com/delta-leonis/Mx.git'
                    developerConnection 'scm:git:ssh://git@github.com/delta-leonis/Mx.git'
                }
                developers {
                    developer {
                        id 'romni'
                        name 'Rimon Oz'
                    }
                    developer {
                        id 'thumbnail'
                        name 'Jeroen de Jong'
                    }
                }
            }
        }
    }
}
